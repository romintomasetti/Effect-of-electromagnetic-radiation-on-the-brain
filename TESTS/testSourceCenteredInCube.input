/* This is a comment */
/* This is a true multiple line comment !
 * Yo !
 * Re-bonjour */
//This is another comment
$INFOS
	$NAME
		// Output file for fields:
		output=RESULTS/OUTPUT_FILES
		// Error log file:
		error=ERROR_LOG
		// Profiling (cpu time, memory, etc):
		profile=PROFILING
	$NAME
	
	$REMOVE_EXISTING_FILES
		// Specify if old .pvti and .vti files must be deleted prior to any computation:
		remove_vti=true
		remove_pvti=true
	$REMOVE_EXISTING_FILES
$INFOS

$MESH
	// Origins of the thermal and electromagnetic grids (in coordinates)
	$ORIGINS
		ORIGIN_ELECTRO_X=0.0
		ORIGIN_ELECTRO_Y=0.0
		ORIGIN_ELECTRO_Z=0.0
		ORIGIN_THERMAL_X=0.0
		ORIGIN_THERMAL_Y=0.0
		ORIGIN_THERMAL_Z=0.0
	$ORIGINS

	// Size of the elements of the mesh:
	$DELTAS
		deltaX_Electro=0.005
		deltaY_Electro=0.005
		deltaZ_Electro=0.005
		delta_Thermal=0.1
		ratio_EM_TH_delta=0.05
	$DELTAS
		
	// Boundaries of the domain
	$DOMAIN_SIZE
		// Length of the domain in each direction
		L_X_ELECTRO=1
		L_Y_ELECTRO=1
		L_Z_ELECTRO=1
		L_X_THERMAL=1
		L_Y_THERMAL=1
		L_Z_THERMAL=1
	$DOMAIN_SIZE
	
	// Information on the source
	$SOURCE
		NBR_SOURCES=1
		// Length of the source in each direction
		L_X=0.1;
		L_Y=0.1;
		L_Z=0.1;
		// Center of the source, (0,0,0) is in the lower left corner in front:
		C_X=0.5;
		C_Y=0.5;
		C_Z=0.5;
		// Frequency [Hz]
		FRQCY=900E6;
		/// Either 'DIPOLE' or 'SIMPLE' (for simple antenna):
		/// If set to dipole, length is proportional to lambda = 3E8/freq
		///
		IMPOSED=SIMPLE;
		/// Information on the source "time" : GAUSSIAN(MEAN,STD) or SINE
		SOURCE_TIME=GAUSSIAN
		// Default with Gaussian is (MEAN,STD)=(0*period,period/10) where period=c/frequency, c=3e8
	$SOURCE
	
	$MATERIALS
		/* PUT AIR EVERYWHERE */
		//USE_AIR_EVERYWHERE=true
		/* TEST PARAVIEW OUTPUT WITH ONE MPI (puts I,J,K inside components
			of the electric and magnetic fields)*/
		//TEST_PARAVIEW=true
		/* TEST PARAVIEW OUTPUT WITH MORE THAN ONE MPI 
			Convention: 1) TEMP=RANK puts the rank of the MPI process
					in each temperature nodes
				    2) E=GLOBAL puts the indices I J K globals
					in each components of the electric field
				    3) H=GLOBAL puts the indices I J K globals
					in each components of the magnetic field*/
		//TEST_PARAVIEW_MPI=(TEMP=RANK,E=GLOBAL,H=GLOBAL)
		USE_GEOMETRY_FILE={true,../CREATE_GEOMETRY/Multi_layered_spherical_brain.geometry}
		MATERIAL_DATA_FILE={OLD=data_air.csv,ELECTRO=tissueproperties_900E6_HZ.csv}
		MATERIAL_DIRECTORY=TISSUES_PROPERTIES
	$MATERIALS
	
$MESH

$RUN_INFOS

	$TIME_STEP
		/// Time step used in the thermal algorithm (accessible by input_parser.thermal_algo_time_step):
		THERMAL_TIME_STEP=1
	$TIME_STEP

	$STOP_SIMUL_AFTER
		// The simulation will stop after... (in sec)
		stopTime=10
		// The electromagnetic solver stops after this max number of steps parameter:
		maxStepsForOneCycleOfElectro=1000
		// input_parser.maxStepsForOneCycleOfElectro
		// The thermal solver stops after this max number of steps:
		maxStepsForOneCycleOfThermal=5E5 
		// input_parser.maxStepsForOneCycleOfThermal

	$STOP_SIMUL_AFTER
	
	// Initial temperatures:
	$TEMP_INIT
		INIT_TEMP_FILE=../initial_temperature_materials.initTemp
	$TEMP_INIT

	// State all your boundary conditions inside this region:
	$BOUNDARY_CONDITIONS
		// Thermal boundary condition of a parallelipipoid:
		/*
		  How to use these Boundary Conditions:
			For Neumann:   {Neumann;value}
			For Dirichlet: {Dirichlet;value} (value = temperature)
		*/
		BC_FACE_0={Neumann;0}
		BC_FACE_1={Neumann;0}
		BC_FACE_2={Dirichlet;50}
		BC_FACE_3={Dirichlet;0}
		BC_FACE_4={Dirichlet;0}
		BC_FACE_5={Dirichlet;0}
		// Accessible by input_parser.THERMAL_FACE_BC_TYPE
		// Accessible by input_parser.THERMAL_FACE_BC_VALUE

	$BOUNDARY_CONDITIONS

	// Gives some information on the sampling frequency / number of steps before saving:
	$OUTPUT_SAVING
		// Sampling frequency for the electromagnetic algorithm:
		SAMPLING_FREQ_ELECTRO=100calc
		// Sampling frequency for the thermal algorithm:
		SAMPLING_FREQ_THERMAL=1
	$OUTPUT_SAVING

	$ELECTRO_STEADY_STATE
		/* We won't check for steady state at each point, but every 
		   -specified by CHECK_EVERY_POINT- points */
		CHECK_EVERY_POINT=10
	$ELECTRO_STEADY_STATE
	
$RUN_INFOS

// This section contains post-processing directives, such as probing data.
$POST_PROCESSING

	$PROBING_POINTS
		// Probe the electrix field (X component) at coordinates (0.2,0.2,0.2) at all times.
		// Outputfile is named 'Ex_02_02_02_ALL'
		probe_point={Ex,0.8,0.5,0.5,ALL}
		probe_point={Ey,0.8,0.5,0.5,ALL}
		probe_point={Ez,0.8,0.5,0.5,ALL}
		probe_point={Ex,0.7,0.5,0.5,ALL}
		probe_point={Ey,0.7,0.5,0.5,ALL}
		probe_point={Ez,0.7,0.5,0.5,ALL}
		probe_point={Ex,0.9,0.5,0.5,ALL}
		probe_point={Ey,0.9,0.5,0.5,ALL}
		probe_point={Ez,0.9,0.5,0.5,ALL}
		probe_point={Ex,0.6,0.5,0.5,ALL}
		probe_point={Ey,0.6,0.5,0.5,ALL}
		probe_point={Ez,0.6,0.5,0.5,ALL}
		probe_point={Ex,0.5,0.5,0.5,ALL}
		probe_point={Ey,0.5,0.5,0.5,ALL}
		probe_point={Ez,0.5,0.5,0.5,ALL}
		probe_point={Ex,1.0,0.5,0.5,ALL}
		probe_point={Ey,1.0,0.5,0.5,ALL}
		probe_point={Ez,1.0,0.5,0.5,ALL}
	$PROBING_POINTS

$POST_PROCESSING


	
